#include <iostream>
#include<string>
#include<string.h>
#include <cstdlib>
#define size 110
using namespace std;

int main() {
    int i=1,i2=1,j2, j,s=0,ss=0,u=1,u1=0,i3=0,j3,i4,j4,co,sign,flag=0,i5,j5;
    int l,m,y,y2,l2,m2,w,bs,bs2,t,r1;
    int semino=0,semino2=0;
    string g1,g2,g3,g4,q,d,d2,dt,t1,t2,t3,t4;
    
	string a[size][size];
	string b[size][size];
	string rea[size][size];
	string imja[size][size];
	string reb[size][size];
	string imjb[size][size];
	float resre[size][size];
	float resimj[size][size];
	string s1,h;// input string for first matrix
	int rows2=0,columns2=0;
	int rows1 = 0, columns1 = 0;
	getline(cin >> ws, s1);
	int length1 = s1.length();//length of the first in but matrix
	int x=0,f=0,x2=0;
    int c1 = 0;
	char op;
	//cin in matrix a and cut the string to get values

			while(1)
	{
	    	if(x==length1)
		      break;
		size_t	y = s1.find_first_of(";", x);// y to find the place of the first semicolon(bybd2 mn 0)
		s=y;
			if (y > length1)
			{
			    y=length1-1;
			    f=i;
			    }
			
		semino++;
		x=y;
		while(1)
		{
		    if(semino==1)
			{columns1++;
			r1=0;}
		
			l = s1.find_first_of(" ", f);//l to find the place of the first space (bybd2 mn 0)
		
			
			if (l < x&&l>0) {
			    f = l+1;//el makan l hybd2 mno b3d kda
				j = l - i;
				a[r1][c1] = s1.substr(i, j);
	        	q=s1.substr(i,j);
			while(1){
			    
				co = q.find_first_of("i",u1);
				 sign =q.find_first_of("-+",u);
				if(co<=q.length())
				{ 
			    i3=sign+1;
				j3=co-i3;
				flag=1;
				 if(sign>0){
				    i5=sign;
				    j5=1;
				    d=q.substr(i5,j5);
				    if (d== "-")
				    i3=sign;
			    	j3=co-i3;
				}
				else
				d="+";
				imja[r1][c1]=q.substr(i3,j3);
				if(j3==0)
				{imja[r1][c1]='1';
				}
				}
				else if(co>q.length())
			{
				rea[r1][c1]=a[r1][c1];
				 imja[r1][c1]='0';
				break;}
				if(flag==1){
				if(sign<q.length()&&sign>0)
				{ 
				i3=0;
				j3=sign;
				rea[r1][c1]=q.substr(i3,j3);
				break;
				}
				else if(sign>q.length()||sign<0)
				{
				rea[r1][c1]='0';
	            break;
				}}
				
				}
				i = l + 1;
			m=l;
				c1++;
				}
			
		
			else if(l > x||l<0)
			{
			    f=s+1;
				i=m+1;
					j = x-i;
				a[r1][c1] = s1.substr(i, j);
					q=s1.substr(i,j);
			
				while(1)
				{
			    
				co = q.find_first_of("i",u1);
				 sign =q.find_first_of("-+",u);
				if(co<=q.length()&&co>0)
				{
				i3=sign+1;
				j3=co-i3;
				flag=1;
				 if(sign>0){
				    i5=sign;
				    j5=1;
				    d=q.substr(i5,j5);
				    if (d=="-")
				    i3=sign;
				    j3=co-i3;
				 }
				 else
				 d="+";
				imja[r1][c1]=q.substr(i3,j3);
				if(j3==0)
				{imja[r1][c1]='1';
				}
				}
				else if(co>q.length()||co<0)
			{  imja[r1][c1]='0';
				rea[r1][c1]=	a[r1][c1];
				break;}
				if(flag==1){ 
				if(sign<q.length()&&sign>0)
				{ 
				i3=0;
				j3=sign;
				rea[r1][c1]=q.substr(i3,j3);
				break;
				}
				else if(sign>q.length()||sign<0)
				{
				rea[r1][c1]='0';
	            break;
				}}
				
				}
				i=f;
					r1++;
					x++;
					bs=1; //// flaaaaaaaaaaaaaag
					c1=0;
					rows1=r1;
				break;
				
			}
			if (bs==1)
			break;
		} 
	}


	cin >> op;
	if (op == '+' || op == '-' || op == '*') {
	    
	    	//cin in matrix b and cut the string to get values (this "if" for level 1)
	string s2;
	getline(cin>>ws , s2);
	int length2=s2.length();
	//cin in matrix b and cut the string to get values

			while(1)
	{
	    	if(x2==length2)
		      break;
		size_t	y2 = s2.find_first_of(";", x2);// y to find the place of the first semicolon(bybd2 mn 0)
		ss=y2;
		
			if (y2 > length2)
			{
			    y2=length2-1;
			    f=i2;
			}
		semino2++;
		x2=y2;
		while(1)
		{
		    if(semino2==1)
			{columns2++;
			r1=0;}
		
			l2 = s2.find_first_of(" ", f);//l to find the place of the first space (bybd2 mn 0)
		
			if (l2 < x2&&l2>0) {
			    f = l2+1;//el makan l hybd2 mno b3d kda
				j2 = l2 - i2;
				b[r1][c1] = s2.substr(i2, j2);
	        	q=s2.substr(i2,j2);
			while(1){
			    
				co = q.find_first_of("i",u1);
				sign =q.find_first_of("-+",u);
				if(co<=q.length())
				{ 
			    i3=sign+1;
				j3=co-i3;
				flag=1;
				 if(sign>0){
				    i5=sign;
				    j5=1;
				    d2=q.substr(i5,j5);
				    if (d2== "-")
				    i3=sign;
			    	j3=co-i3;
				}
				else
				d2="+";
				imjb[r1][c1]=q.substr(i3,j3);
				if(j3==0)
				{imjb[r1][c1]='1';
				}
				}
				else if(co>q.length())
			{
				reb[r1][c1]=b[r1][c1];
				imjb[r1][c1]='0';
				break;}
				if(flag==1){
				if(sign<q.length()&&sign>0)
				{ 
				i3=0;
				j3=sign;
				reb[r1][c1]=q.substr(i3,j3);
				break;
				}
				else if(sign>q.length()||sign<0)
				{
				reb[r1][c1]='0';
	            break;
				}}
				
				}
				i2 = l2 + 1;
			m=l2;
				c1++;
				}
			
		
			else if(l2 > x2||l2<0)
			{
			    f=ss+1;
				i2=m+1;
				j2 = x2-i2;
				b[r1][c1] = s2.substr(i2, j2);
				q=s2.substr(i2,j2);
			
				while(1)
				{
			    
				co = q.find_first_of("i",u1);
				sign=q.find_first_of("-+",u);
				if(co<=q.length()&&co>0)
				{
				i3=sign+1;
				j3=co-i3;
				flag=1;
				 if(sign>0){
				    i5=sign;
				    j5=1;
				    d2=q.substr(i5,j5);
				    if (d2=="-")
				    i3=sign;
				    j3=co-i3;
				 }
				 else
				 d2="+";
				imjb[r1][c1]=q.substr(i3,j3);
				if(j3==0)
				{imjb[r1][c1]='1';
				}
				}
				else if(co>q.length()||co<0)
			{  imjb[r1][c1]='0';
				reb[r1][c1]=b[r1][c1];
				break;}
				if(flag==1){ 
				if(sign<q.length()&&sign>0)
				{ 
				i3=0;
				j3=sign;
				reb[r1][c1]=q.substr(i3,j3);
				break;
				}
				else if(sign>q.length()||sign<0)
				{
				reb[r1][c1]='0';
	            break;
				}}
				
				}
				i2=f;
					r1++;
					x2++;
					bs2=1; //// flaaaaaaaaaaaaaag
					c1=0;
					rows2=r1;
				break;
			}
			if (bs2==1)
			break;
		} 
	}

	
	
	switch (op) {
	
			case'+':
		
			
				if (rows1 == rows2&&columns1 == columns2) {
					for ( w = 0;w < rows1;w++)
					{
						for ( t = 0;t < columns1;t++)
						{	 g1=rea[w][t];
                         	 g2=reb[w][t];
                         	 t1=imja[w][t];
                         	 t2=imjb[w][t];
							resre[w][t] = atof(g1.c_str()) + atof(g2.c_str());
							resimj[w][t] = atof(t1.c_str()) + atof(t2.c_str());
					}
					}
					cout << "[";
	for (int i = 0;i < rows1;i++)
	{
		for (int j = 0;j < columns1;j++)
		{ if(resimj[i][j]>0)
		{h="+";}
		else if(resimj[i][j]<0)
		{h="-";
		resimj[i][j]=resimj[i][j]*-1;}
			cout << resre[i][j]<<h<<resimj[i][j]<<"i";
			if (j == columns1 - 1) continue;
				cout<<" ";
		} 
		if (i == rows1 - 1) continue;

		cout << ";";
	}
	cout << "]";
					break;
				}
				else
				{
					cout << "ERROR";
					break;
				}
        
	case'-':
			
					if (rows1 == rows2&&columns1 == columns2) {
						for ( w = 0;w < rows1;w++)
						{
							for ( t = 0;t < columns1;t++)
							{	g1=rea[w][t];
			                	g2=reb[w][t];
			                	t1=imja[w][t];
			                	t2=imjb[w][t];
								resre[w][t] = atof(g1.c_str()) - atof(g2.c_str());
								resimj[w][t]= atof(t1.c_str()) - atof(t2.c_str());
						}
						}
											cout << "[";
	for (int i = 0;i < rows1;i++)
	{
		for (int j = 0;j < columns1;j++)
		{
	 if(resimj[i][j]>0)
		{h="+";}
		else if(resimj[i][j]<0)
		{h="-";
		resimj[i][j]=resimj[i][j]*-1;}
			cout << resre[i][j]<<h<<resimj[i][j]<<"i";
			if (j == columns1 - 1) continue;
				cout<<" ";
		} 
		if (i == rows1 - 1) continue;

		cout << ";";
	}
	cout << "]";
						
						break;
					}
					else {
						cout << "ERROR";
						break;
					}
					
				
		case'*':
	                 	int y,u,k;

						if (columns1 == rows2) {
							for ( u = 0;u < rows1;u++)
							{
								for ( y = 0;y < columns2;y++)
								{

									for ( k = 0;k < columns1;k++)
									{
									     g3=rea[u][k];
				                    	 g4=reb[k][y];
				                    	 t3=imja[u][k];
				                    	 t4=imjb[k][y];
				                    	 
										resre[u][y] += atof(g3.c_str())*atof(g4.c_str())-atof(t3.c_str())*atof(t4.c_str());
										resimj[u][y] += atof(g3.c_str())*atof(t3.c_str())+atof(t4.c_str())*atof(g4.c_str());

		
									}
								}
							}
							
												cout << "[";
	for (int i = 0;i < rows1;i++)
	{
		for (int j = 0;j < columns2;j++)
		{
	 if(resimj[i][j]>0)
		{h="+";}
		else if(resimj[i][j]<0)
		{h="-";
		resimj[i][j]=resimj[i][j]*-1;}
			cout << resre[i][j]<<h<<resimj[i][j]<<"i";
			if (j == columns2 - 1) continue;
				cout<<" ";
		} 
		if (i == rows1 - 1) continue;

		cout << ";";
	}
	cout << "]";
					break;
						}
						else {
							cout << "ERROR";
							break;
						}
		
	}
	}

							return 0;
						}
